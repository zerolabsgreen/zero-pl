openapi: "3.0.0"
paths:
  /blockchain/properties:
    get:
      operationId: "BlockchainPropertiesController_get"
      parameters: []
      responses:
        200:
          description: "Returns blockchain properties"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlockchainPropertiesDTO"
      tags:
        - "blockchain"
  /blockchain/{txHash}:
    get:
      operationId: "BlockchainPropertiesController_getTransaction"
      parameters:
        - name: "txHash"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Returns the receipt for the transaction"
          content:
            application/json:
              schema:
                type: "string"
      tags:
        - "blockchain"
  /batch:
    post:
      operationId: "BatchController_create"
      parameters: []
      responses:
        201:
          description: "Creates a batch and returns the tx hash"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionPendingDTO"
      tags:
        - "batch"
    get:
      operationId: "BatchController_getAll"
      parameters: []
      responses:
        200:
          description: "Returns all batches"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/BatchDTO"
      tags:
        - "batch"
  /batch/id/{txHash}:
    get:
      operationId: "BatchController_getBatchesCreatedIn"
      parameters:
        - name: "txHash"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Returns batch IDs that were created in the transaction"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
      tags:
        - "batch"
  /batch/{id}:
    get:
      operationId: "BatchController_get"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Returns the batch"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchDTO"
      tags:
        - "batch"
  /batch/redemption-statement/{batchId}:
    post:
      operationId: "BatchController_setRedemptionStatement"
      parameters:
        - name: "batchId"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetRedemptionStatementDTO"
      responses:
        201:
          description: "Sets a redemption statement to a batch and returns the tx hash"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionPendingDTO"
      tags:
        - "batch"
  /batch/mint/{batchId}:
    post:
      operationId: "BatchController_mint"
      parameters:
        - name: "batchId"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/MintCertificateDTO"
      responses:
        201:
          description: "Mints certificates from a batch and returns the tx hash"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionPendingDTO"
      tags:
        - "batch"
  /certificate/{id}:
    get:
      operationId: "CertificateController_get"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Returns a Certificate"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CertificateWithOwnersDTO"
      tags:
        - "certificates"
  /certificate:
    get:
      operationId: "CertificateController_getAll"
      parameters: []
      responses:
        200:
          description: "Returns all Certificates"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CertificateWithOwnersDTO"
      tags:
        - "certificates"
  /certificate/transfer/batch:
    post:
      operationId: "CertificateController_transferBatch"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferBatchDTO"
      responses:
        201:
          description: "Transfers the certificates and returns the tx hash"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionPendingDTO"
      tags:
        - "certificates"
  /certificate/transfer/{id}:
    post:
      operationId: "CertificateController_transfer"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferDTO"
      responses:
        201:
          description: "Transfers the certificate and returns the tx hash"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionPendingDTO"
      tags:
        - "certificates"
  /certificate/claim/{id}:
    post:
      operationId: "CertificateController_claim"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClaimDTO"
      responses:
        201:
          description: "Claims and returns the tx hash"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionPendingDTO"
      tags:
        - "certificates"
  /certificate/id/{txHash}:
    get:
      operationId: "CertificateController_getCertificatesCreatedIn"
      parameters:
        - name: "txHash"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Returns certificate IDs that were created in the transaction"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
      tags:
        - "certificates"
  /certificate/{id}/events:
    get:
      operationId: "CertificateController_getEventsForCertificate"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
        - name: "pageSize"
          required: false
          in: "query"
          example: 20
          description: "Number of events on one page"
          schema:
            type: "number"
        - name: "currentPage"
          required: false
          in: "query"
          example: 1
          description: "Current page number"
          schema:
            type: "number"
        - name: "eventType"
          required: false
          in: "query"
          description: "Filer by event type"
          example: "transfer"
          schema:
            type: "string"
      responses:
        200:
          description: "Returns paginated and filtered set of available certificate events"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventsResponseDTO"
      tags:
        - "certificates"
  /agreement:
    post:
      operationId: "AgreementController_deploy"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/CreateAgreementDTO"
      responses:
        201:
          description: "Deployed agreement data"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AgreementDTO"
      tags:
        - "agreement"
    get:
      operationId: "AgreementController_getAll"
      parameters: []
      responses:
        200:
          description: "Returns all agreements"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AgreementDTO"
      tags:
        - "agreement"
  /agreement/sign:
    post:
      operationId: "AgreementController_sign"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/SignAgreementDTO"
      responses:
        201:
          description: "Signing ceremony transaction hash"
          content:
            application/json:
              schema:
                type: "string"
      tags:
        - "agreement"
  /agreement/{address}:
    get:
      operationId: "AgreementController_get"
      parameters:
        - name: "address"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Returns the agreement"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AgreementDTO"
      tags:
        - "agreement"
info:
  title: "Zero - Tokenization Module API"
  description: ""
  version: "0.1"
  contact: {}
tags: []
servers: []
components:
  schemas:
    BlockchainPropertiesDTO:
      type: "object"
      properties:
        netId:
          type: "number"
          example: 246
        registry:
          type: "string"
          example: "0xe42a4Ee279B36e137b4D395B232808bEE8E42C2D"
        topic:
          type: "string"
          example: 0
        batchFactory:
          type: "string"
          example: "0x6c8d8D6c8a52Dc6ed1b89F9292e4dC88b20421ac"
        agreementFactory:
          type: "string"
          example: "0x6c8d8D6c8a52Dc6ed1b89F9292e4dC88b20421ac"
        platformOperatorAddress:
          type: "string"
          example: "0xD173313A51f8fc37BcF67569b463abd89d81844f"
        rpcNode:
          type: "string"
          example: "https://rpc.energyweb.org"
        rpcNodeFallback:
          type: "string"
          example: "https://rpc2.energyweb.org"
      required:
        - "netId"
        - "registry"
        - "topic"
        - "batchFactory"
        - "agreementFactory"
        - "platformOperatorAddress"
        - "rpcNode"
    TransactionPendingDTO:
      type: "object"
      properties:
        txHash:
          type: "string"
          description: "Transaction hash"
          example: "0xb79c048b1d44e146925cf55705aa8f84422d7d5e3d858993467c241cad0caf4b"
      required:
        - "txHash"
    BatchDTO:
      type: "object"
      properties:
        id:
          type: "string"
          description: "Batch ID"
          example: "1"
        txHash:
          type: "string"
          description: "Transaction hash in which the batch was created"
          example: "0xb79c048b1d44e146925cf55705aa8f84422d7d5e3d858993467c241cad0caf4b"
        certificateIds:
          description: "Certificates minted from this batch"
          example:
            - "1"
            - "2"
          type: "array"
          items:
            type: "string"
        redemptionStatement:
          type: "string"
          description: "Redemption statement"
          example: "0xba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"
      required:
        - "id"
        - "txHash"
        - "certificateIds"
    SetRedemptionStatementDTO:
      type: "object"
      properties:
        value:
          type: "string"
          description: "Redemption statement value"
          example: "0xba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad"
        storagePointer:
          type: "string"
          description: "Storage pointer"
          example: "https://storage.example.com/api/file/1"
      required:
        - "value"
    GeneratorDTO:
      type: "object"
      properties:
        id:
          type: "string"
          description: "Generator Id"
          example: "SOL-123"
        name:
          type: "string"
          description: "Generator Name"
          example: "Solar Farm 123"
        energySource:
          type: "string"
          example: "SOLAR"
        region:
          type: "string"
          example: "EU"
        country:
          type: "string"
          example: "HR"
        commissioningDate:
          type: "number"
          description: "Unix timestamp of commissioning date"
          example: 1636154471
        capacity:
          type: "string"
          example: "5000000"
      required:
        - "id"
        - "name"
        - "energySource"
        - "region"
        - "country"
        - "commissioningDate"
        - "capacity"
    CertificateWithoutIdDTO:
      type: "object"
      properties:
        generationStartTime:
          type: "number"
          description: "Unix timestamp"
          example: 1636154471
        generationEndTime:
          type: "number"
          description: "Unix timestamp"
          example: 1636154471
        productType:
          type: "string"
          description: "Type of product"
          example: "IREC"
        generator:
          $ref: "#/components/schemas/GeneratorDTO"
        data:
          type: "string"
          description: "Data that was set when the certificate was minted"
          example: "0x"
      required:
        - "generationStartTime"
        - "generationEndTime"
        - "productType"
        - "generator"
        - "data"
    MintCertificateDTO:
      type: "object"
      properties:
        to:
          type: "string"
          description: "Ethereum address to mint to"
          example: "0xD173313A51f8fc37BcF67569b463abd89d81844f"
        amount:
          type: "string"
          description: "Amount"
          example: "1000000"
        certificate:
          description: "Certificate data"
          allOf:
            - $ref: "#/components/schemas/CertificateWithoutIdDTO"
        data:
          type: "string"
          description: "Minting data"
          example: "0x4180833af7628289fbab51d41b0b6a3f7dbf84b4f50a1757596f07f8bde6eda1"
      required:
        - "to"
        - "amount"
        - "certificate"
        - "data"
    CertificateWithOwnersDTO:
      type: "object"
      properties:
        id:
          type: "string"
          description: "Certificate Id"
          example: "1"
        generationStartTime:
          type: "number"
          description: "Unix timestamp"
          example: 1636154471
        generationEndTime:
          type: "number"
          description: "Unix timestamp"
          example: 1636154471
        productType:
          type: "string"
          description: "Type of product"
          example: "IREC"
        generator:
          $ref: "#/components/schemas/GeneratorDTO"
        data:
          type: "string"
          description: "Data that was set when the certificate was minted"
          example: "0x"
        owners:
          type: "object"
          example:
            0xD173313A51f8fc37BcF67569b463abd89d81844f: 1000000
            0xd46aC0Bc23dB5e8AfDAAB9Ad35E9A3bA05E092E8: 2000000
        claimed:
          type: "object"
          example:
            0xD173313A51f8fc37BcF67569b463abd89d81844f: 1000000
      required:
        - "id"
        - "generationStartTime"
        - "generationEndTime"
        - "productType"
        - "generator"
        - "data"
        - "owners"
        - "claimed"
    TransferWithIdDTO:
      type: "object"
      properties:
        from:
          type: "string"
          example: "0xd46aC0Bc23dB5e8AfDAAB9Ad35E9A3bA05E092E8"
          description: "Public blockchain address"
        to:
          type: "string"
          example: "0xd46aC0Bc23dB5e8AfDAAB9Ad35E9A3bA05E092E8"
          description: "Public blockchain address"
        amount:
          type: "string"
          example: "1000000"
        certificateId:
          type: "string"
          description: "Certificate Id"
          example: "1"
      required:
        - "from"
        - "to"
        - "amount"
        - "certificateId"
    TransferBatchDTO:
      type: "object"
      properties:
        transfers:
          description: "Transfers"
          example: "[\n      {\n        \"certificateId\": \"1\",\n        \"from\": \"0xD173313A51f8fc37BcF67569b463abd89d81844f\",\n        \"to\": \"0xd46aC0Bc23dB5e8AfDAAB9Ad35E9A3bA05E092E8\",\n        \"amount\": \"600\"\n      },\n      {\n        \"certificateId\": \"1\",\n        \"from\": \"0xD173313A51f8fc37BcF67569b463abd89d81844f\",\n        \"to\": \"0xd46aC0Bc23dB5e8AfDAAB9Ad35E9A3bA05E092E8\",\n        \"amount\": \"700\"\n      }\n    ]"
          type: "array"
          items:
            $ref: "#/components/schemas/TransferWithIdDTO"
      required:
        - "transfers"
    TransferDTO:
      type: "object"
      properties:
        from:
          type: "string"
          example: "0xd46aC0Bc23dB5e8AfDAAB9Ad35E9A3bA05E092E8"
          description: "Public blockchain address"
        to:
          type: "string"
          example: "0xd46aC0Bc23dB5e8AfDAAB9Ad35E9A3bA05E092E8"
          description: "Public blockchain address"
        amount:
          type: "string"
          example: "1000000"
      required:
        - "from"
        - "to"
        - "amount"
    ClaimDataDTO:
      type: "object"
      properties:
        beneficiary:
          type: "string"
          example: "Beneficiary One"
        region:
          type: "string"
          example: "CA"
        countryCode:
          type: "string"
          example: "US"
        periodStartDate:
          type: "string"
          example: "2021-11-08T17:11:11.883Z"
          description: "ISO String"
        periodEndDate:
          type: "string"
          example: "2021-11-08T17:11:11.883Z"
          description: "ISO String"
        purpose:
          type: "string"
          example: "claiming"
        consumptionEntityID:
          type: "string"
          example: "CONS-123"
        proofID:
          type: "string"
          example: "123"
      required:
        - "beneficiary"
        - "region"
        - "countryCode"
        - "periodStartDate"
        - "periodEndDate"
        - "purpose"
        - "consumptionEntityID"
        - "proofID"
    ClaimDTO:
      type: "object"
      properties:
        claimData:
          description: "Information about the claim"
          allOf:
            - $ref: "#/components/schemas/ClaimDataDTO"
        from:
          type: "string"
          example: "0xd46aC0Bc23dB5e8AfDAAB9Ad35E9A3bA05E092E8"
          description: "Public blockchain address"
        to:
          type: "string"
          example: "0xd46aC0Bc23dB5e8AfDAAB9Ad35E9A3bA05E092E8"
          description: "Public blockchain address"
        amount:
          type: "string"
          example: 1000000
      required:
        - "claimData"
        - "from"
    EventsResponseDTO:
      type: "object"
      properties:
        dataSet:
          example:
            - eventType: "transfer"
              id: "1"
              certificateId: "1"
              from: "0x0000000000000000000000000000000000000000"
              to: "0xD173313A51f8fc37BcF67569b463abd89d81844f"
              value: "1000000"
              operator: "0x384A377D142F5bF9c5649b3fED322F45E0261A0C"
              blockNumber: 73
              txHash: "0xac40070dc36e7fc274573326d776f21652e125716e879ca4578cf4a4539365aa"
              blockHash: "0x795f32868489b9edbf4daef6eb3cdae215836b7eb786ba8763b66d82ec19709d"
              timestamp: 1651661990566
          description: "Paginated set of certificate events"
          type: "array"
          items:
            type: "string"
        totalCount:
          type: "number"
          example: 50
          description: "Number of events on all pages"
        pageSize:
          type: "number"
          example: 20
          description: "Number of events on one page"
        currentPage:
          type: "number"
          example: 1
          description: "Current page number"
        lastPage:
          type: "number"
          example: 3
          description: "Last page number"
        nextPage:
          type: "number"
          example: 2
          description: "Next page number"
      required:
        - "dataSet"
        - "totalCount"
        - "pageSize"
        - "currentPage"
        - "lastPage"
        - "nextPage"
    EnergySource:
      type: "string"
      enum:
        - SOLAR: "SOLAR"
          WIND: "WIND"
          HYDRO: "HYDRO"
          MARINE: "MARINE"
          THERMAL: "THERMAL"
          BIOMASS: "BIOMASS"
          BIOGAS: "BIOGAS"
    CreateAgreementDTO:
      type: "object"
      properties:
        buyer:
          type: "string"
          description: "Buyer blockchain address"
          example: "0xd46aC0Bc23dB5e8AfDAAB9Ad35E9A3bA05E092E8"
        seller:
          type: "string"
          description: "Seller blockchain address"
          example: "0x9442ED348b161af888e6cB999951aE8b961F7B4B"
        amount:
          type: "string"
          description: "Total deliverable amount agreed in the agreement"
          example: "10000000"
        energySources:
          type: "array"
          example:
            - "SOLAR"
          items:
            $ref: "#/components/schemas/EnergySource"
      required:
        - "buyer"
        - "seller"
        - "amount"
        - "energySources"
    AgreementDTO:
      type: "object"
      properties:
        address:
          type: "string"
          description: "Agreement address"
          example: "0xd46aC0Bc23dB5e8AfDAAB9Ad35E9A3bA05E092E8"
        buyer:
          type: "string"
          description: "Buyer blockchain address"
          example: "0xd46aC0Bc23dB5e8AfDAAB9Ad35E9A3bA05E092E8"
        seller:
          type: "string"
          description: "Seller blockchain address"
          example: "0x9442ED348b161af888e6cB999951aE8b961F7B4B"
        amount:
          type: "string"
          description: "Total deliverable amount agreed in the agreement"
          example: "10000000"
        filledAmount:
          type: "string"
          description: "Delivered amount"
          example: "1000000"
        energySources:
          type: "array"
          example:
            - "SOLAR"
          items:
            $ref: "#/components/schemas/EnergySource"
        txHash:
          type: "string"
          description: "Transaction hash in which the agreement was created"
          example: "0xac40070dc36e7fc274573326d776f21652e125716e879ca4578cf4a4539365aa"
        signed:
          type: "boolean"
          description: "Flag to show whether the agreement has been signed"
          example: true
      required:
        - "address"
        - "buyer"
        - "seller"
        - "amount"
        - "filledAmount"
        - "energySources"
        - "txHash"
        - "signed"
    SignAgreementDTO:
      type: "object"
      properties:
        agreementAddress:
          type: "string"
          description: "Agreement address"
          example: "0xd46aC0Bc23dB5e8AfDAAB9Ad35E9A3bA05E092E8"
        sellerSignature:
          type: "string"
          description: "Seller's signature"
          example: "0xfff4db04e6fe6cf6b5c6327d240c3c430a5ec2e3a4d8dd1aa7c35b04398bd99017ab60163e49965b1d1602348fb9974e900c096c79ced6b118ec1218be1a5b461c"
        buyerSignature:
          type: "string"
          description: "Buyer's signature"
          example: "0xb55b2521eda6d5f332e5b909bc610e2264dccf3f5d6d31b6096d6dbb11b3d728113efcd97fba6f2faa11b58aa767bb5f7b04121b82b7baa608fd5e4314202e351c"
      required:
        - "agreementAddress"
        - "sellerSignature"
        - "buyerSignature"
